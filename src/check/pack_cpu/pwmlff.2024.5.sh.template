#!/bin/bash
SKIP=`awk '/^__ARCHIVE_BELOW__/ { print NR + 1; exit 0; }' $0`
tail -n+$SKIP $0 | base64 -d > PWMLFF_cpu-2024.5.tar.gz.base64
BASE_DIR=$(pwd)
TEMP_DIR=$(mktemp -d)
FINAL_DIR=$BASE_DIR/PWMLFF_cpu-2024.5
ENV_DIR=$FINAL_DIR/pwmlff_cpu-2024.5
LAMMPS_DIR=$FINAL_DIR/lammps-2024.5

# 创建最终目录
mkdir -p $FINAL_DIR
mkdir -p $ENV_DIR

# 进入临时目录并解压
cd $TEMP_DIR
tar -xvzf $BASE_DIR/PWMLFF_cpu-2024.5.tar.gz.base64

# 解压 pwmlff 环境包
tar -xvzf pwmlff_cpu-2024.5.tar.gz -C $ENV_DIR

# 检查 TEMP_DIR 内容以确认 lammps_2024.5 存在
echo "TEMP_DIR:"
ls $TEMP_DIR

# 将 PWMLFF 和 lammps_2024.5 目录移至 FINAL_DIR
mv $TEMP_DIR/PWMLFF $FINAL_DIR
mv $TEMP_DIR/lammps-2024.5 $FINAL_DIR

# 激活 pwmlff2024.5 Python 环境
source $ENV_DIR/bin/activate

# 编译 PWMLFF
cd $FINAL_DIR/PWMLFF/src
sh build.sh

# 设置环境变量
export PATH=$FINAL_DIR/PWMLFF/src/bin:$PATH
export PYTHONPATH=$FINAL_DIR/PWMLFF/src/:$PYTHONPATH
export OP_LIB_PATH=$(dirname $(dirname $(which PWMLFF)))/op/build/lib

# 编译 lammps_2024.5
# cd $LAMMPS_DIR/src/PWMLFF/NEP_GPU
# make clean
# make

# 继续编译 LAMMPS 模块
cd $LAMMPS_DIR/src
make yes-KSPACE
make yes-MANYBODY
make yes-REAXFF
make yes-MOLECULE
make yes-QEQ
make yes-REPLICA
make yes-RIGID
make yes-MEAM
make yes-MC
make yes-PWMLFF

# 使用 5 个线程并行编译
make mpi -j5

BASHRC_FILE=~/.bashrc
# 检查并写入 .bashrc 文件
if ! grep -q "export PATH=$LAMMPS_DIR/src:\$PATH" $BASHRC_FILE; then
    echo "export PATH=$LAMMPS_DIR/src:\$PATH" >> $BASHRC_FILE
    echo "Added Lammps PATH to .bashrc"
fi

# 添加新的 LD_LIBRARY_PATH
NEW_LD_LIBRARY_PATH="$(python3 -c "import torch; print(torch.__path__[0])")/lib:$(dirname $(dirname $(which python3)))/lib:$(dirname $(dirname $(which PWMLFF)))/op/build/lib"

if ! grep -q "export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:$NEW_LD_LIBRARY_PATH" $BASHRC_FILE; then
    echo "export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:$NEW_LD_LIBRARY_PATH" >> $BASHRC_FILE
    echo "Added new LD_LIBRARY_PATH to .bashrc"
fi

# 清理临时目录
rm -rf $TEMP_DIR
rm -rf $BASE_DIR/PWMLFF_cpu-2024.5.tar.gz.base64
echo "Installation completed successfully!"
exit 0
__ARCHIVE_BELOW__
